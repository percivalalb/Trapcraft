plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.matthewprenger.cursegradle' version '1.4.+'
    id 'org.ajoberstar.grgit' version '5.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version "1.+"
}

def branch = grgit.branch.current()
println "On branch: ${branch.fullName}"
println "Pipeline branch: " + (System.getenv('CI_COMMIT_BRANCH') ?: 'NONE')

group = 'com.gitlab.percivalalb'
archivesBaseName = "Trapcraft-${project.target_mc_version}"
version = (grgit.describe(longDescr: true, tags: true) ?: '0-0-0').split('-').with { it -> "${it[0]}.${it[1]}" }

println "Version: ${version}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += 'src/generated/resources'
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        name = "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven"
        content { includeGroup "mezz.jei" }
    }
    maven {
        name = "ModMaven"
        url "https://modmaven.dev"
        content { includeGroup "mezz.jei" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

//    compileOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-common-api:${project.jei_version}")
//    compileOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-forge-api:${project.jei_version}")
//    runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_mc_version}-forge:${project.jei_version}")
}

minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_mappings

    copyIdeResources = true

    runs {
        client {
            taskName 'trapcraft_client'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'trapcraft'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            taskName 'trapcraft_server'
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'trapcraft'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            taskName 'trapcraft_data'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'trapcraft', '--all', '--output', '"' + project.file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                trapcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

def replaceResources = tasks.register('replaceResources', Copy) {
    it.outputs.upToDateWhen { false }
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand([
            'version': project.version,
            'minecraft_version_range': project.minecraft_version_range,
            'forge_version_range': project.forge_version_range,
            'fml_version_range': project.fml_version_range,
        ])
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('api')
    from sourceSets.api.output
    from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output
    from sourceSets.api.output

    manifest {
        attributes([
            "Specification-Title": "trapcraft",
            "Specification-Vendor": "percivalalb",
            "Specification-Version": project.version, // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"percivalalb",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name": "trapcraft"
        ])
    }
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = project.file("build/changelog.html")
    untaggedName = "Current release ${project.version}"
    fromCommit = '3a162ee7d39b89d2ba182f0f8f9f3e744e893c92'
    toRef = 'HEAD'

    templateContent = project.file('changelog.mustache').getText('UTF-8')
}

curseforge {
    apiKey = findProperty('curseforge_api_key') ?: 0
    project {
        id = project.curseforge_project_id
        changelog = project.file("build/changelog.html")
        changelogType = 'html'
        releaseType = findProperty("curseforge_release_type") ?: 'beta'
        addGameVersion project.target_mc_version
        for (String v : project.additional_mc_versions.split(',')) {
            if (v) {
                addGameVersion v
            }
        }
        addArtifact apiJar
    }
}

// Must be done in afterEvaluate as the specific curseforge$id
// task is generated lazily
afterEvaluate {
    tasks.named("curseforge${project.curseforge_project_id}").get().dependsOn.add(makeChangelog)
}
